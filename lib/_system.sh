#!/bin/bash

system_update() {
  print_banner
  printf "${WHITE} üíª Vamos preparar o sistema para o AutoAtende...${GRAY_LIGHT}"
  printf "\n\n"
  sleep 2
  sudo su - root <<EOF
  sudo apt -y update
  sudo apt-get -y upgrade
  sudo apt-get install -y build-essential libxshmfence-dev libgbm-dev wget unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils
  sudo apt-get autoremove -y
EOF
  sleep 2
}

system_node_install() {
  print_banner
  printf "${WHITE} üíª Verificando Node.js...${GRAY_LIGHT}"
  printf "\n\n"
  
  # Verificar se o Node.js j√° est√° configurado para o usu√°rio deploy
  node_version=""
  
  if id "deploy" &>/dev/null; then
    # Verificar se existe via NVM
    node_version=$(sudo -u deploy bash -c 'export NVM_DIR="$HOME/.nvm"; [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"; node -v 2>/dev/null || echo ""')
    
    # Se n√£o encontrou via NVM, verificar instala√ß√£o direta
    if [ -z "$node_version" ]; then
      node_version=$(sudo -u deploy bash -c 'command -v node &> /dev/null && node -v' 2>/dev/null || echo "")
    fi
  fi
  
  if [ ! -z "$node_version" ] && [ "$use_existing_components" = "true" ]; then
    printf "${GREEN} ‚úÖ Node.js ${node_version} j√° est√° instalado para o usu√°rio deploy${GRAY_LIGHT}\n"
    
    # Verificar compatibilidade (se estamos pr√≥ximos da vers√£o desejada)
    if [[ "$node_version" =~ ^v20 ]]; then
      printf "${GREEN} ‚úÖ Vers√£o compat√≠vel do Node.js detectada${GRAY_LIGHT}\n"
    else
      printf "${YELLOW} ‚ö†Ô∏è A vers√£o do Node.js (${node_version}) pode n√£o ser totalmente compat√≠vel.${GRAY_LIGHT}\n"
      printf "${YELLOW} Recomendado: Node.js v20.x. Continuar mesmo assim? (y/N)${GRAY_LIGHT} "
      read -n 1 -r
      printf "\n"
      
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        printf "${YELLOW} Instalando Node.js 20 via NVM...${GRAY_LIGHT}\n"
        
        # Configurar NVM para o usu√°rio deploy e instalar Node.js 20
        sudo -u deploy bash -c '
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          
          # Verificar se NVM est√° instalado, caso contr√°rio instalar
          if ! command -v nvm &> /dev/null; then
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          fi
          
          # Instalar Node.js 20
          nvm install 20
          nvm use 20
          nvm alias default 20
        '
      fi
    fi
  else
    printf "${YELLOW} ‚ö†Ô∏è Node.js n√£o detectado ou reinstala√ß√£o solicitada. Instalando...${GRAY_LIGHT}\n"
    
    # Instalar PostgreSQL 16 (MANTENDO ESTA PARTE CRUCIAL)
    if ! command -v psql &> /dev/null || [ "$postgresql_installed" != "true" ]; then
      printf "\n${WHITE} üíª Instalando PostgreSQL 16...${GRAY_LIGHT}"
      sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
      wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
      sudo apt-get update -y
      sudo apt-get -y install postgresql-16
      
      sudo systemctl enable postgresql
      sudo systemctl start postgresql
    else
      printf "\n${GREEN} ‚úÖ PostgreSQL j√° est√° instalado${GRAY_LIGHT}\n"
    fi
    
    # Configurar fuso hor√°rio
    sudo timedatectl set-timezone America/Sao_Paulo
    
    # Instalar NVM para o usu√°rio deploy
    sudo su - deploy << EOF
    # Remover instala√ß√£o anterior do NVM, se existir
    rm -rf ~/.nvm
    
    # Remover arquivo .npmrc se existir para evitar conflitos
    rm -f ~/.npmrc
    
    # Baixar e instalar NVM usando wget
    wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    
    # Configurar NVM no perfil do usu√°rio
    export NVM_DIR="\$HOME/.nvm"
    [ -s "\$NVM_DIR/nvm.sh" ] && \. "\$NVM_DIR/nvm.sh"
    
    # Instalar Node.js 20 especificamente
    nvm install 20
    nvm use 20 --delete-prefix
    nvm alias default 20
    
    # Verificar a instala√ß√£o
    node -v
    npm -v
    
    # Adicionar configura√ß√£o aos arquivos de perfil
    echo 'export NVM_DIR="\$HOME/.nvm"' >> \$HOME/.bashrc
    echo '[ -s "\$NVM_DIR/nvm.sh" ] && \. "\$NVM_DIR/nvm.sh"' >> \$HOME/.bashrc
    echo 'export NVM_DIR="\$HOME/.nvm"' >> \$HOME/.profile
    echo '[ -s "\$NVM_DIR/nvm.sh" ] && \. "\$NVM_DIR/nvm.sh"' >> \$HOME/.profile
EOF
  fi
  
  printf "\n${GREEN} ‚úÖ Verifica√ß√£o e configura√ß√£o do Node.js conclu√≠da!${GRAY_LIGHT}\n"
  sleep 2
}

system_redis_install() {
  print_banner
  printf "${WHITE} üíª Verificando Redis...${GRAY_LIGHT}"
  printf "\n\n"
  
  # Verificar se o Redis j√° est√° instalado e funcionando
  redis_running=false
  if command -v redis-cli &> /dev/null && sudo systemctl is-active --quiet redis-server; then
    redis_running=true
    redis_version=$(redis-server --version | grep -o 'v=[0-9.]*' | cut -d= -f2)
    printf "${GREEN} ‚úÖ Redis vers√£o ${redis_version} j√° est√° instalado e rodando${GRAY_LIGHT}\n"
  fi
  
  if [ "$redis_running" = "true" ] && [ "$use_existing_components" = "true" ]; then
    printf "${GREEN} ‚úÖ Usando instala√ß√£o existente do Redis${GRAY_LIGHT}\n"
    
    # Verificar se precisamos atualizar a configura√ß√£o
    printf "${YELLOW} ‚ö†Ô∏è Deseja atualizar a configura√ß√£o do Redis para o AutoAtende? (y/N)${GRAY_LIGHT} "
    read -n 1 -r
    printf "\n"
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      # Fazer backup da configura√ß√£o atual
      sudo cp /etc/redis/redis.conf /etc/redis/redis.conf.bak.$(date +%Y%m%d%H%M%S)
      
      # Atualizar configura√ß√£o
      sudo bash -c "cat > /etc/redis/redis.conf << EOF
# Redis configura√ß√£o para AutoAtende
bind 127.0.0.1
port ${redis_port}
protected-mode yes
requirepass ${mysql_root_password}
maxmemory 2gb
maxmemory-policy allkeys-lru
appendonly yes
appendfsync everysec
no-appendfsync-on-rewrite yes
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
aof-use-rdb-preamble yes
# Melhorias de performance
activedefrag yes
maxclients 10000
timeout 300
tcp-keepalive 300
EOF"
      
      # Reiniciar Redis
      sudo systemctl restart redis-server
      printf "${GREEN} ‚úÖ Configura√ß√£o do Redis atualizada${GRAY_LIGHT}\n"
      
      # Testar conex√£o
      if redis-cli -a "${mysql_root_password}" ping | grep -q "PONG"; then
        printf "${GREEN} ‚úÖ Teste de conex√£o Redis bem sucedido!${GRAY_LIGHT}\n"
      else
        printf "${RED} ‚ö†Ô∏è Teste de conex√£o Redis falhou. Restaurando configura√ß√£o...${GRAY_LIGHT}\n"
        sudo cp /etc/redis/redis.conf.bak.$(ls -t /etc/redis/redis.conf.bak.* | head -n1 | cut -d. -f3) /etc/redis/redis.conf
        sudo systemctl restart redis-server
      fi
    else
      printf "${YELLOW} ‚ö†Ô∏è Mantendo configura√ß√£o atual do Redis${GRAY_LIGHT}\n"
      
      # Verificar se podemos testar a senha atual
      printf "${YELLOW} ‚ö†Ô∏è Por favor, informe a senha atual do Redis (deixe em branco para tentar sem senha):${GRAY_LIGHT} "
      read -s current_redis_password
      printf "\n"
      
      if [ -z "$current_redis_password" ]; then
        if redis-cli ping | grep -q "PONG"; then
          printf "${GREEN} ‚úÖ Redis est√° acess√≠vel sem senha${GRAY_LIGHT}\n"
        else
          printf "${RED} ‚ö†Ô∏è N√£o foi poss√≠vel conectar ao Redis sem senha${GRAY_LIGHT}\n"
          printf "${YELLOW} ‚ö†Ô∏è Voc√™ precisar√° configurar a senha manualmente no arquivo .env mais tarde${GRAY_LIGHT}\n"
        fi
      else
        if redis-cli -a "$current_redis_password" ping | grep -q "PONG"; then
          printf "${GREEN} ‚úÖ Redis est√° acess√≠vel com a senha fornecida${GRAY_LIGHT}\n"
          mysql_root_password="$current_redis_password"
          printf "${GREEN} ‚úÖ Usando a senha do Redis existente para configura√ß√£o${GRAY_LIGHT}\n"
        else
          printf "${RED} ‚ö†Ô∏è N√£o foi poss√≠vel conectar ao Redis com a senha fornecida${GRAY_LIGHT}\n"
          printf "${YELLOW} ‚ö†Ô∏è Voc√™ precisar√° configurar a senha manualmente no arquivo .env mais tarde${GRAY_LIGHT}\n"
        fi
      fi
    fi
  else
    printf "${YELLOW} ‚ö†Ô∏è Redis n√£o detectado ou reinstala√ß√£o solicitada. Instalando...${GRAY_LIGHT}\n"
    
    # C√≥digo original para instalar o Redis
    # Remover instala√ß√µes anteriores
    sudo apt-get remove --purge -y redis-server redis-tools || true
    sudo apt-get autoremove -y
    sudo rm -rf /etc/redis /var/lib/redis
    
    # Adicionar reposit√≥rio do Redis 7.x
    sudo su - root <<EOF
    # Remover chave antiga se existir
    rm -f /usr/share/keyrings/redis-archive-keyring.gpg
    
    # Adicionar reposit√≥rio do Redis com tratamento adequado para evitar prompts
    curl -fsSL https://packages.redis.io/gpg | gpg --yes --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb \$(lsb_release -cs) main" | tee /etc/apt/sources.list.d/redis.list > /dev/null
    
    # Atualizar e instalar Redis
    apt-get update -y
    apt-get install -y redis-server
EOF
    
    # Continuar com a configura√ß√£o original...
    # Fazer backup da configura√ß√£o original do Redis
    sudo cp /etc/redis/redis.conf /etc/redis/redis.conf.backup
    
    # Configurar Redis
    sudo bash -c "cat > /etc/redis/redis.conf << EOF
# Redis 7.x configura√ß√£o
bind 127.0.0.1
port ${redis_port}
protected-mode yes
requirepass ${mysql_root_password}
maxmemory 2gb
maxmemory-policy allkeys-lru
appendonly yes
appendfsync everysec
no-appendfsync-on-rewrite yes
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
aof-use-rdb-preamble yes
# Melhorias de performance
activedefrag yes
maxclients 10000
timeout 300
tcp-keepalive 300
EOF"
    
    # Reiniciar Redis e configurar para iniciar com o sistema
    sudo systemctl restart redis-server
    sudo systemctl enable redis-server
  fi
  
  # Garantir que o usu√°rio deploy tenha acesso ao Redis
  sudo usermod -a -G redis deploy 2>/dev/null || true
  
  printf "\n${GREEN} ‚úÖ Verifica√ß√£o e configura√ß√£o do Redis conclu√≠da!${GRAY_LIGHT}\n"
  sleep 2
}

system_create_user() {
  print_banner
  printf "${WHITE} üíª Verificando usu√°rio deploy...${GRAY_LIGHT}"
  printf "\n\n"

  if id "deploy" &>/dev/null && [ "$use_existing_components" = "true" ]; then
    printf "${GREEN} ‚úÖ Usu√°rio deploy j√° existe e ser√° mantido${GRAY_LIGHT}\n"
    
    # Garantir que o usu√°rio deploy esteja nos grupos corretos
    sudo usermod -aG sudo deploy 2>/dev/null || true
    
    # Verificar permiss√µes do diret√≥rio home
    if [ -d "/home/deploy" ]; then
      sudo chmod 755 /home/deploy
      printf "${GREEN} ‚úÖ Permiss√µes do diret√≥rio /home/deploy verificadas${GRAY_LIGHT}\n"
    else
      printf "${RED} ‚ö†Ô∏è Diret√≥rio /home/deploy n√£o encontrado, mas usu√°rio existe!${GRAY_LIGHT}\n"
      printf "${YELLOW} Criando diret√≥rio home...${GRAY_LIGHT}\n"
      sudo mkdir -p /home/deploy
      sudo chown deploy:deploy /home/deploy
      sudo chmod 755 /home/deploy
    fi
  else
    # C√≥digo original para criar o usu√°rio
    printf "${WHITE} üîÑ Criando novo usu√°rio deploy...${GRAY_LIGHT}\n"
    
    # Remover usu√°rio e grupo se existirem
    sudo userdel -rf deploy >/dev/null 2>&1 || true
    sudo groupdel deploy >/dev/null 2>&1 || true
    sudo rm -rf /home/deploy >/dev/null 2>&1 || true
    
    # Criar grupo deploy
    sudo groupadd deploy
    
    # Criar usu√°rio deploy com senha definida diretamente
    sudo useradd -m -s /bin/bash -g deploy deploy
    
    # Definir senha
    echo "deploy:${mysql_root_password}" | sudo chpasswd
    
    # Adicionar ao grupo sudo
    sudo usermod -aG sudo deploy
    
    # Ajustar permiss√µes do diret√≥rio home
    if [ -d "/home/deploy" ]; then
      sudo chown -R deploy:deploy /home/deploy
      sudo chmod 755 /home/deploy
    else
      printf "\n${RED} ‚ö†Ô∏è Erro: Diret√≥rio /home/deploy n√£o foi criado!${GRAY_LIGHT}\n"
      exit 1
    fi
  fi

  printf "\n${GREEN} ‚úÖ Verifica√ß√£o do usu√°rio deploy conclu√≠da!${GRAY_LIGHT}\n"
  sleep 2
}

system_generate_jwt_secrets() {
  if [ -z "$JWT_SECRET" ]; then
    JWT_SECRET=$(openssl rand -hex 32)
  fi
  
  if [ -z "$JWT_REFRESH_SECRET" ]; then
    JWT_REFRESH_SECRET=$(openssl rand -hex 32)
  fi
}

system_git_clone() {
  print_banner
  printf "${WHITE} üíª Clonando reposit√≥rio...${GRAY_LIGHT}"
  printf "\n\n"
  sleep 2
  
  # Verificar se o token foi definido
  if [ -z "$token_code" ]; then
    printf "\n${RED} ‚ö†Ô∏è Token n√£o definido. N√£o √© poss√≠vel clonar o reposit√≥rio.${GRAY_LIGHT}"
    printf "\n\n"
    sleep 5
    return 1
  fi
  
  # Limpar qualquer instala√ß√£o anterior
  sudo rm -rf /home/deploy/empresa
  
  # Criar diret√≥rio base
  sudo mkdir -p /home/deploy/empresa
  sudo chown -R deploy:deploy /home/deploy/empresa
  
  # Tentar clonar o reposit√≥rio
  if sudo -u deploy git clone https://lucassaud:${token_code}@github.com/AutoAtende/Sys3.git /home/deploy/empresa/ ; then
    printf "\n${GREEN} ‚úÖ Reposit√≥rio clonado com sucesso!${GRAY_LIGHT}"
  else
    printf "\n${RED} ‚ö†Ô∏è Falha ao clonar o reposit√≥rio. Verificando conectividade...${GRAY_LIGHT}"
    
    # Verificar conectividade
    if ping -c 1 github.com &> /dev/null; then
      printf "\n${YELLOW} Conex√£o com github.com est√° funcionando. Problema pode ser com o token.${GRAY_LIGHT}"
    else
      printf "\n${RED} Sem conectividade com github.com. Verifique sua conex√£o.${GRAY_LIGHT}"
    fi
    
    sleep 5
    return 1
  fi
  
  # Garantir permiss√µes corretas
  sudo chown -R deploy:deploy /home/deploy/empresa
  
  sleep 2
}

system_pm2_install() {
  print_banner
  printf "${WHITE} üíª Verificando PM2...${GRAY_LIGHT}\n\n"
  
  # Verificar se o PM2 j√° est√° instalado
  pm2_installed=false
  if id "deploy" &>/dev/null; then
    pm2_version=$(sudo -u deploy bash -c "export NVM_DIR=\"\$HOME/.nvm\"; [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\"; pm2 --version 2>/dev/null || echo \"\"")
    
    if [ ! -z "$pm2_version" ]; then
      pm2_installed=true
      printf "${GREEN} ‚úÖ PM2 vers√£o ${pm2_version} j√° est√° instalado para o usu√°rio deploy${GRAY_LIGHT}\n"
    fi
  fi
  
  if [ "$pm2_installed" = "true" ] && [ "$use_existing_components" = "true" ]; then
    printf "${GREEN} ‚úÖ Usando instala√ß√£o existente do PM2${GRAY_LIGHT}\n"
    
    # Verificar configura√ß√£o do startup
    printf "${YELLOW} ‚ö†Ô∏è Deseja configurar o PM2 para iniciar automaticamente? (y/N)${GRAY_LIGHT} "
    read -n 1 -r
    printf "\n"
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      # Configurar PM2 startup
      sudo env PATH=$PATH:/usr/bin /home/deploy/.nvm/versions/node/*/bin/pm2 startup systemd -u deploy --hp /home/deploy || true
      
      printf "${GREEN} ‚úÖ PM2 configurado para iniciar automaticamente${GRAY_LIGHT}\n"
    fi
  else
    printf "${YELLOW} ‚ö†Ô∏è PM2 n√£o detectado ou reinstala√ß√£o solicitada. Instalando...${GRAY_LIGHT}\n"
    
    # C√≥digo original para instalar o PM2
    # Remover .npmrc se existir para evitar conflitos com NVM
    sudo -u deploy bash -c "rm -f ~/.npmrc"
    
    # Instalar PM2 globalmente para o usu√°rio deploy usando NVM
    sudo su - deploy << EOF
    # Remover qualquer configura√ß√£o que possa causar conflito
    rm -f ~/.npmrc
    
    # Carregar NVM
    export NVM_DIR="\$HOME/.nvm"
    [ -s "\$NVM_DIR/nvm.sh" ] && \. "\$NVM_DIR/nvm.sh"
    
    # Usar node com a op√ß√£o delete-prefix para resolver conflitos
    nvm use 20 --delete-prefix
    
    # Verificar se o Node.js est√° dispon√≠vel
    if command -v node &> /dev/null; then
      echo "Node.js encontrado: \$(node -v)"
    else
      echo "Node.js n√£o encontrado, tentando carregar novamente NVM"
      source ~/.nvm/nvm.sh
      nvm use 20 --delete-prefix
    fi
    
    # Instalar PM2 globalmente
    echo "Instalando PM2..."
    npm install -g pm2@latest
    
    # Verificar a instala√ß√£o
    echo "Vers√£o do PM2 instalada:"
    pm2 --version
EOF

    # Verificar se o PM2 foi instalado
    pm2_version=$(sudo -u deploy bash -c "export NVM_DIR=\"\$HOME/.nvm\"; [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\"; pm2 --version 2>/dev/null || echo \"\"")
  fi
  
  printf "\n${GREEN} ‚úÖ Verifica√ß√£o e configura√ß√£o do PM2 conclu√≠da!${GRAY_LIGHT}\n"
  sleep 2
}

system_verify_environment() {
  print_banner
  printf "${WHITE} üîç Verificando ambiente para o usu√°rio deploy...${GRAY_LIGHT}\n\n"
  
  # Verificar PostgreSQL
  if sudo systemctl is-active --quiet postgresql; then
    printf "${GREEN} ‚úÖ PostgreSQL est√° ativo e funcionando${GRAY_LIGHT}\n"
  else
    printf "${RED} ‚ùå PostgreSQL n√£o est√° ativo! Tentando iniciar...${GRAY_LIGHT}\n"
    sudo systemctl start postgresql
    sleep 2
    if ! sudo systemctl is-active --quiet postgresql; then
      printf "${RED} ‚ùå Falha ao iniciar PostgreSQL${GRAY_LIGHT}\n"
      return 1
    fi
  fi
  
  # Verificar e corrigir conflitos de .npmrc para o usu√°rio deploy
  printf "${WHITE} üîç Verificando configura√ß√£o do npm...${GRAY_LIGHT}\n"
  if sudo -u deploy test -f /home/deploy/.npmrc; then
    printf "${YELLOW} ‚ö†Ô∏è Arquivo .npmrc encontrado. Removendo para evitar conflitos com NVM.${GRAY_LIGHT}\n"
    sudo -u deploy bash -c "rm -f ~/.npmrc"
  fi
  
  # Verificar Node.js
  node_version=$(sudo -u deploy bash -c 'export NVM_DIR="$HOME/.nvm"; [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"; nvm use 20 --delete-prefix --silent 2>/dev/null; node -v 2>/dev/null || echo ""')
  
  if [[ -z "$node_version" ]]; then
    printf "${RED} ‚ùå Node.js n√£o est√° instalado para o usu√°rio deploy${GRAY_LIGHT}\n"
    return 1
  else
    printf "${GREEN} ‚úÖ Node.js ${node_version} instalado para o usu√°rio deploy${GRAY_LIGHT}\n"
  fi
  
  # Verificar NPM
  npm_version=$(sudo -u deploy bash -c 'export NVM_DIR="$HOME/.nvm"; [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"; nvm use 20 --delete-prefix --silent 2>/dev/null; npm -v 2>/dev/null || echo ""')
  
  if [[ -z "$npm_version" ]]; then
    printf "${RED} ‚ùå NPM n√£o est√° instalado para o usu√°rio deploy${GRAY_LIGHT}\n"
    return 1
  else
    printf "${GREEN} ‚úÖ NPM ${npm_version} instalado para o usu√°rio deploy${GRAY_LIGHT}\n"
  fi
  
  # Verificar PM2
  pm2_version=$(sudo -u deploy bash -c 'export NVM_DIR="$HOME/.nvm"; [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"; nvm use 20 --delete-prefix --silent 2>/dev/null; pm2 --version 2>/dev/null || echo ""')
  
  if [[ -z "$pm2_version" ]]; then
    printf "${RED} ‚ùå PM2 n√£o est√° instalado para o usu√°rio deploy${GRAY_LIGHT}\n"
    return 1
  else
    printf "${GREEN} ‚úÖ PM2 ${pm2_version} instalado para o usu√°rio deploy${GRAY_LIGHT}\n"
  fi
  
  printf "\n${GREEN} ‚úÖ Ambiente verificado com sucesso! Pronto para prosseguir.${GRAY_LIGHT}\n"
  sleep 2
  return 0
}

system_fail2ban_install() {
  print_banner
  printf "${WHITE} üíª Instalando fail2ban...${GRAY_LIGHT}"
  printf "\n\n"
  sleep 2
  sudo su - root <<EOF
  sudo apt install fail2ban -y && sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
EOF
  sleep 2
}

system_fail2ban_conf() {
  print_banner
  printf "${WHITE} üíª Configurando o fail2ban...${GRAY_LIGHT}"
  printf "\n\n"
  sleep 2
  sudo su - root <<EOF
  sudo systemctl enable fail2ban
  sudo systemctl start fail2ban
EOF
  sleep 2
}

system_firewall_conf() {
  print_banner
  printf "${WHITE} üíª Configurando o firewall...${GRAY_LIGHT}"
  printf "\n\n"
  sleep 2
  sudo su - root <<EOF
  sudo ufw default allow outgoing
  sudo ufw default deny incoming
  sudo ufw allow ssh
  sudo ufw allow 22
  sudo ufw allow 80
  sudo ufw allow 443
  sudo ufw enable
EOF
  sleep 2
}

system_nginx_install() {
  print_banner
  printf "${WHITE} üíª Verificando Nginx...${GRAY_LIGHT}"
  printf "\n\n"
  
  # Verificar se o Nginx j√° est√° instalado e funcionando
  nginx_running=false
  if command -v nginx &> /dev/null && sudo systemctl is-active --quiet nginx; then
    nginx_running=true
    nginx_version=$(nginx -v 2>&1 | grep -o 'nginx/[0-9.]*' | cut -d/ -f2)
    printf "${GREEN} ‚úÖ Nginx vers√£o ${nginx_version} j√° est√° instalado e rodando${GRAY_LIGHT}\n"
  fi
  
  if [ "$nginx_running" = "true" ] && [ "$use_existing_components" = "true" ]; then
    printf "${GREEN} ‚úÖ Usando instala√ß√£o existente do Nginx${GRAY_LIGHT}\n"
    
    # Verificar se o site padr√£o est√° ativo e remover se necess√°rio
    if [ -f "/etc/nginx/sites-enabled/default" ]; then
      printf "${YELLOW} ‚ö†Ô∏è O site padr√£o do Nginx est√° ativo. Deseja remov√™-lo? (Y/n)${GRAY_LIGHT} "
      read -n 1 -r
      printf "\n"
      
      if [[ ! $REPLY =~ ^[Nn]$ ]]; then
        sudo rm -f /etc/nginx/sites-enabled/default
        sudo rm -f /etc/nginx/sites-available/default
        printf "${GREEN} ‚úÖ Site padr√£o do Nginx removido${GRAY_LIGHT}\n"
      fi
    fi
  else
    printf "${YELLOW} ‚ö†Ô∏è Nginx n√£o detectado ou reinstala√ß√£o solicitada. Instalando...${GRAY_LIGHT}\n"
    
    # C√≥digo original para instalar o Nginx
    sudo su - root <<EOF
    sudo apt install -y nginx
    rm -f /etc/nginx/sites-enabled/default
    rm -f /etc/nginx/sites-available/default
EOF
  fi
  
  printf "\n${GREEN} ‚úÖ Verifica√ß√£o e configura√ß√£o do Nginx conclu√≠da!${GRAY_LIGHT}\n"
  sleep 2
}

system_certbot_install() {
  print_banner
  printf "${WHITE} üíª Instalando certbot...${GRAY_LIGHT}"
  printf "\n\n"
  sleep 2
  
  # Remover instala√ß√£o anterior do certbot
  sudo apt-get remove -y certbot &>/dev/null || true
  
  # Instalar via snap
  sudo snap install --classic certbot
  
  # Criar link simb√≥lico
  sudo ln -sf /snap/bin/certbot /usr/bin/certbot
  
  # Verificar instala√ß√£o
  if command -v certbot &> /dev/null; then
    printf "\n${GREEN} ‚úÖ Certbot instalado com sucesso!${GRAY_LIGHT}"
  else
    printf "\n${RED} ‚ö†Ô∏è Falha ao instalar Certbot. Tentando m√©todo alternativo...${GRAY_LIGHT}"
    sudo apt-get update
    sudo apt-get install -y certbot python3-certbot-nginx
  fi
  
  sleep 2
}

system_nginx_conf() {
  print_banner
  printf "${WHITE} üíª Configurando nginx...${GRAY_LIGHT}"
  printf "\n\n"
  sleep 2
sudo su - root << EOF
cat > /etc/nginx/conf.d/deploy.conf << 'END'
client_max_body_size 100M;
END
EOF
  sleep 2
}

system_nginx_restart() {
  print_banner
  printf "${WHITE} üíª Reiniciando nginx...${GRAY_LIGHT}"
  printf "\n\n"
  sleep 2
  sudo su - root <<EOF
  service nginx restart
EOF
  sleep 2
}

system_certbot_setup() {
  print_banner
  printf "${WHITE} üíª Configurando certbot, J√° estamos perto do fim...${GRAY_LIGHT}"
  printf "\n\n"
  sleep 2
  
  # Extrair dom√≠nios sem o protocolo https://
  frontend_domain=$(echo "${frontend_url}" | sed 's~^https://~~')
  backend_domain=$(echo "${backend_url}" | sed 's~^https://~~')
  
  # Verificar se os dom√≠nios foram extra√≠dos corretamente
  if [ -z "$frontend_domain" ] || [ -z "$backend_domain" ]; then
    printf "\n${RED} ‚ö†Ô∏è Erro ao extrair dom√≠nios das URLs. Verifique as URLs fornecidas.${GRAY_LIGHT}"
    printf "\n Frontend: ${frontend_url}"
    printf "\n Backend: ${backend_url}"
    sleep 5
    return 1
  fi
  
  # Verificar se o nginx est√° rodando
  if ! sudo systemctl is-active --quiet nginx; then
    printf "\n${RED} ‚ö†Ô∏è Nginx n√£o est√° rodando. Tentando iniciar...${GRAY_LIGHT}"
    sudo systemctl start nginx
    sleep 3
    
    if ! sudo systemctl is-active --quiet nginx; then
      printf "\n${RED} ‚ö†Ô∏è Falha ao iniciar Nginx. Certbot pode falhar.${GRAY_LIGHT}"
      sleep 5
    fi
  fi
  
  # Configurar um email para o certbot
  if [ -z "$deploy_email" ]; then
    deploy_email="admin@${frontend_domain}"
    printf "\n${YELLOW} ‚ö†Ô∏è Email n√£o definido. Usando ${deploy_email} como padr√£o.${GRAY_LIGHT}"
  fi
  
  # Executar certbot para os dom√≠nios
  printf "\n${WHITE} üîÑ Executando certbot para ${frontend_domain} e ${backend_domain}...${GRAY_LIGHT}"
  sudo certbot --nginx --agree-tos --non-interactive -m "${deploy_email}" --domains "${frontend_domain},${backend_domain}" --redirect
  
  # Verificar resultado
  if [ $? -eq 0 ]; then
    printf "\n${GREEN} ‚úÖ Certificados SSL instalados com sucesso!${GRAY_LIGHT}"
  else
    printf "\n${RED} ‚ö†Ô∏è Falha ao instalar certificados SSL. Tentando m√©todo alternativo...${GRAY_LIGHT}"
    
    # Tentar executar para cada dom√≠nio separadamente
    sudo certbot --nginx --agree-tos --non-interactive -m "${deploy_email}" --domains "${frontend_domain}" --redirect
    sudo certbot --nginx --agree-tos --non-interactive -m "${deploy_email}" --domains "${backend_domain}" --redirect
  fi
  
  # Reiniciar nginx para aplicar as altera√ß√µes
  sudo systemctl restart nginx
  
  sleep 2
}

system_delete() {
  print_banner
  printf "${WHITE} üíª Digite o nome da inst√¢ncia que deseja remover:${GRAY_LIGHT}"
  printf "\n\n"
  read -p "> " instancia_delete
  
  if [ -z "$instancia_delete" ]; then
    printf "\n${RED} ‚ö†Ô∏è O nome da inst√¢ncia n√£o pode ficar vazio!${GRAY_LIGHT}"
    printf "\n\n"
    return
  fi
  
  if [ ! -d "/home/deploy/${instancia_delete}" ]; then
    printf "\n${RED} ‚ö†Ô∏è Inst√¢ncia n√£o encontrada!${GRAY_LIGHT}"
    printf "\n\n"
    return
  fi
  
  print_banner
  printf "${RED} ‚ö†Ô∏è ATEN√á√ÉO! Esta opera√ß√£o ir√° remover completamente a inst√¢ncia ${instancia_delete}${GRAY_LIGHT}"
  printf "\n\n"
  printf "${RED} ‚ö†Ô∏è Isso inclui todos os dados, arquivos e configura√ß√µes!${GRAY_LIGHT}"
  printf "\n\n"
  read -p "Tem certeza que deseja continuar? (y/N) " -n 1 -r
  printf "\n\n"
  
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    printf "${WHITE} ‚úîÔ∏è Opera√ß√£o cancelada!${GRAY_LIGHT}"
    printf "\n\n"
    return
  fi
  
  # Parar e remover processos do PM2
  sudo su - deploy <<EOF
    pm2 stop ${instancia_delete}-backend
    pm2 delete ${instancia_delete}-backend
    pm2 save
EOF
  
  # Remover banco de dados PostgreSQL
  sudo su - postgres <<EOF
    dropdb ${instancia_delete}
    dropuser ${instancia_delete}
EOF
  
  # Remover arquivos do sistema
  sudo rm -rf /home/deploy/${instancia_delete}
  
  # Remover configura√ß√µes do nginx
  sudo rm -f /etc/nginx/sites-enabled/${instancia_delete}-backend
  sudo rm -f /etc/nginx/sites-enabled/${instancia_delete}-frontend
  sudo rm -f /etc/nginx/sites-available/${instancia_delete}-backend
  sudo rm -f /etc/nginx/sites-available/${instancia_delete}-frontend
  
  # Recarregar nginx
  sudo systemctl reload nginx
  
  print_banner
  printf "${GREEN} ‚úÖ Sistema removido com sucesso!${GRAY_LIGHT}"
  printf "\n\n"
  
  # Se for a √∫ltima inst√¢ncia, oferecer remo√ß√£o completa
  if [ -z "$(ls -A /home/deploy/)" ]; then
    printf "${WHITE} üìù Nenhuma outra inst√¢ncia encontrada. Deseja remover todos os programas instalados?${GRAY_LIGHT}"
    printf "\n\n"
    read -p "Remover programas? (y/N) " -n 1 -r
    printf "\n\n"
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      # Remover PostgreSQL
      sudo apt-get remove --purge -y postgresql*
      
      # Remover Redis
      sudo apt-get remove --purge -y redis-server
      
      # Remover Nginx
      sudo apt-get remove --purge -y nginx
      
      # Remover Node.js
      sudo apt-get remove --purge -y nodejs
      
      # Remover PM2
      sudo npm uninstall -g pm2
      
      # Remover certbot
      sudo snap remove certbot
      
      # Remover usu√°rio deploy
      sudo userdel -r deploy
      
      # Limpar pacotes n√£o utilizados
      sudo apt-get autoremove -y
      sudo apt-get clean
      
      print_banner
      printf "${GREEN} ‚úÖ Todos os programas foram removidos com sucesso!${GRAY_LIGHT}"
      printf "\n\n"
    fi
  fi
}
